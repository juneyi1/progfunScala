package week7

class Pouring(capacity: Vector[Int]) { // capacity for each glass

// States (type alias)
  type State = Vector[Int]
  val initialState = capacity map (x => 0)
  
// Moves
  trait Move {
    def change(state: State): State
  }
  case class Empty(glass: Int) extends Move {
    def change(state: State) = state updated (glass, 0) // a new state object is generated by "updated" method
  }
  case class Fill(glass: Int) extends Move {
    def change(state: State) = state updated (glass, capacity(glass)) // a new state object is generated by "updated" method
  }
  case class Pour(from: Int, to: Int) extends Move {
    def change(state: State) = {
      val amount = state(from) min (capacity(to) - state(to))
      state updated (from, state(from) - amount) updated (to, state(to) + amount) // a new state object is generated by "updated" method 
    }        
  }
  
  val glasses = 0 until capacity.length
  
  val moves = {
    (for (g <- glasses) yield Empty(g)) ++
    (for (g <- glasses) yield Fill(g)) ++
    (for (from <- glasses; to <- glasses if from != to) yield Pour(from, to))
  }
  
// Paths
//  class Path(history: List[Move]) { //last move comes first in history
  class Path(history: List[Move], val endState: State) { //last move comes first in history
//    def endState: State = (history foldRight initialState) (_ change _)    
//    def endState: State = trackState(history)
//    private def trackState(xs: List[Move]): State  = xs match {
//      case Nil => initialState
//      case move :: xs1 => move change trackState(xs1)
//    }
//    def extend(move: Move) = new Path(move :: history)
    def extend(move: Move) = new Path(move :: history, move change endState  )
    override def toString = (history.reverse mkString " ") + "--> " + endState
  } 
  
  val initialPath = new Path(Nil, initialState)
  
  def from(paths: Set[Path], explored: Set[State]): Stream[Set[Path]] = {
    if(paths.isEmpty) Stream.empty
    else {
      val more = for {
        path <- paths
        next <- moves map path.extend        
        if !(explored contains next.endState)
      } yield next
      paths #:: from(more, explored ++ (more map (_.endState))) // given path set plus next generation "more"
    }
  }
  // Set of initial paths + Set of paths of length 1 + Set of paths of length 2 + ... till infinity
  val pathSets = from(Set(initialPath), Set(initialState))  
  
  def solutions(target: Int): Stream[Path] = { 
    // All solution paths ordered by length
    for {
      pathSet <- pathSets
      path <- pathSet
      if path.endState contains target
    } yield path //why end up being in a stream ?
  }
  
  
}